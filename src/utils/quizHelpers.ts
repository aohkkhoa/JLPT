// src/utils/quizHelpers.ts
// C√°c h√†m ti·ªán √≠ch ƒë·ªÉ sinh c√¢u h·ªèi cho Quiz
// To√†n b·ªô ch√∫ th√≠ch b·∫±ng ti·∫øng Vi·ªát

import type { Question } from "../types/quiz";
import { base_hira, dakuten, yoon } from "../data/kana";
import { ALL_LESSONS_DATA } from "../data/minnaData";

/**
 * Tr·ªôn m·∫£ng (Fisher‚ÄìYates)
 */
function shuffle<T>(arr: T[]): T[] {
  const a = arr.slice();
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

/**
 * Sinh c√¢u h·ªèi cho KANA
 *
 * selectedSets: { base: boolean, dakuten: boolean, yoon: boolean }
 * num: s·ªë c√¢u h·ªèi mong mu·ªën
 *
 * Tr·∫£ v·ªÅ Question[] v·ªõi:
 * - questionText: k√Ω t·ª± kana (hiragana/katakana) ƒë·ªÉ hi·ªÉn th·ªã
 * - correctAnswers: { romaji, hiragana }
 */
export function generateKanaQuestions(
  selectedSets: Record<"base" | "dakuten" | "yoon", boolean>,
  num: number
): Question[] {
  const pool: [string, string][] = [];

  // m·ªói file data k·ª≥ v·ªçng d·∫°ng array [kanaChar, romaji]
  if (selectedSets.base) pool.push(...(base_hira as [string, string][]));
  if (selectedSets.dakuten) pool.push(...(dakuten as [string, string][]));
  if (selectedSets.yoon) pool.push(...(yoon as [string, string][]));

  if (pool.length === 0) return [];

  const shuffled = shuffle(pool);
  const slice = shuffled.slice(0, Math.min(num, shuffled.length));

  return slice.map(([kana, romaji]) => ({
    questionText: kana,
    correctAnswers: {
      romaji,
      hiragana: kana,
    },
    type: "TYPING",
  }));
}

/**
 * H√†m tr·∫£ v·ªÅ ph·∫£n h·ªìi (feedback) d·ª±a tr√™n ƒëi·ªÉm ph·∫ßn trƒÉm
 * @param score - ƒëi·ªÉm s·ªë ph·∫ßn trƒÉm (0‚Äì100)
 * @returns Object g·ªìm message (n·ªôi dung) v√† color (class m√†u)
 */
export function getFeedback(score: number): { message: string; color: string } {
  if (score === 100) {
    return { message: "Ho√†n h·∫£o! B·∫°n l√†m ƒë√∫ng t·∫•t c·∫£ üéâ", color: "text-green-500" };
  }
  if (score >= 90) {
    return { message: "R·∫•t t·ªët! G·∫ßn nh∆∞ ho√†n h·∫£o üí™", color: "text-emerald-500" };
  }
  if (score >= 70) {
    return { message: "T·ªët r·ªìi! H√£y luy·ªán th√™m m·ªôt ch√∫t nh√© üëç", color: "text-sky-500" };
  }
  if (score >= 50) {
    return { message: "·ªîn, nh∆∞ng c·∫ßn √¥n l·∫°i th√™m üëÄ", color: "text-yellow-500" };
  }
  return { message: "H√£y th·ª≠ l·∫°i nh√©! B·∫°n s·∫Ω ti·∫øn b·ªô nhanh th√¥i üí°", color: "text-red-500" };
}


/**
 * Sinh c√¢u h·ªèi d·∫°ng VI -> JP (typing) t·ª´ d·ªØ li·ªáu ALL_LESSONS_DATA (phi√™n b·∫£n m·ªõi)
 *
 * - selectedLessons: m·∫£ng s·ªë b√†i (v√≠ d·ª• [1,2,3]); n·∫øu r·ªóng/undefined => d√πng t·∫•t c·∫£ b√†i
 * - num: t·ªïng s·ªë c√¢u mu·ªën sinh
 *
 * L∆∞u √Ω:
 * - N·∫øu m·ªôt m·ª•c vocabulary kh√¥ng c√≥ romaji th√¨ s·∫Ω b·ªã b·ªè qua (kh√¥ng th·ªÉ ch·∫•m)
 * - N·∫øu kh√¥ng c√≥ hira, h√†m s·∫Ω d√πng item.jp l√†m fallback cho hira
 */
export function generateViToJpTypingQuestions(selectedLessons: number[] = [], num: number): Question[] {
  const pool: {
    vi: string;
    jp: string;
    hira: string;
    romaji: string;
    kanji?: string;
  }[] = [];

  const skipped: { lesson: number; item: any; reason: string }[] = [];

  const lessonsToUse = (selectedLessons && selectedLessons.length > 0)
    ? selectedLessons
    : Object.keys(ALL_LESSONS_DATA).map(Number);


  for (const n of lessonsToUse) {
    const lesson = (ALL_LESSONS_DATA as any)[n];
    if (!lesson || !lesson.vocabulary || !Array.isArray(lesson.vocabulary)) {
      continue;
    }

    for (const item of lesson.vocabulary) {
      // item k·ª≥ v·ªçng c√≥: jp, romaji, vi
      if (!item) {
        skipped.push({ lesson: n, item, reason: "item is falsy" });
        continue;
      }

      // N·∫øu kh√¥ng c√≥ romaji th√¨ skip (theo logic hi·ªán t·∫°i) ‚Äî ghi l·∫°i ƒë·ªÉ debug
      if (!item.romaji) {
        skipped.push({ lesson: n, item, reason: "missing romaji" });
        continue;
      }

      const romajiNorm = String(item.romaji).toLowerCase().trim().replace(/\s+/g, " ");
      const hira = (item as any).hira ? String((item as any).hira).trim() : String(item.jp ?? "").trim();

      pool.push({
        vi: String(item.vi ?? "").trim(),
        jp: String(item.jp ?? "").trim(),
        hira,
        romaji: romajiNorm,
        kanji: item.kanji ? String(item.kanji).trim() : undefined,
      });
    }
  }


  if (skipped.length > 0) {
    // in v√†i m·∫´u item b·ªã skip (t·ªëi ƒëa 10) ƒë·ªÉ b·∫°n ki·ªÉm tra d·ªØ li·ªáu
    console.log("[quizHelpers] skipped samples (up to 10):", skipped.slice(0, 10));
  }

  if (pool.length === 0) {
    console.warn("[quizHelpers] pool r·ªóng ‚Äî kh√¥ng th·ªÉ sinh c√¢u h·ªèi (h√£y ki·ªÉm tra ALL_LESSONS_DATA, romaji b·ªã thi·∫øu?)");
    return [];
  }

  const shuffled = shuffle(pool);
  const slice = shuffled.slice(0, Math.min(num, shuffled.length));

  // LOG: b√°o s·ªë c√¢u cu·ªëi c√πng tr·∫£ v·ªÅ
  console.log(`[quizHelpers] returning ${slice.length} questions (requested ${num})`);

  return slice.map((entry) => ({
    questionText: entry.vi || entry.jp || entry.romaji,
    correctAnswers: {
      romaji: entry.romaji,
      hiragana: entry.hira || "",
      kanji: entry.kanji,
    },
    type: "TYPING",
  }));
}

/**
 * Sinh c√¢u h·ªèi d·∫°ng JP -> VI (MCQ)
 * - Hi·ªÉn th·ªã ch·ªØ/kanji/kana ti·∫øng Nh·∫≠t (entry.jp)
 * - T·∫°o 4 ƒë√°p √°n ti·∫øng Vi·ªát, bao g·ªìm 1 ƒë√°p √°n ƒë√∫ng v√† 3 distractor ng·∫´u nhi√™n
 */
export function generateJpToViMcqQuestions(selectedLessons: number[] = [], num: number): Question[] {
  const pool: { vi: string; jp: string; hira: string; romaji: string; kanji?: string }[] = [];

  const lessonsToUse = (selectedLessons && selectedLessons.length > 0)
    ? selectedLessons
    : Object.keys(ALL_LESSONS_DATA).map(Number);

  for (const n of lessonsToUse) {
    const lesson = (ALL_LESSONS_DATA as any)[n];
    if (!lesson || !lesson.vocabulary || !Array.isArray(lesson.vocabulary)) continue;

    for (const item of lesson.vocabulary) {
      if (!item) continue;
      if (!item.vi) continue; // c·∫ßn c√≥ nghƒ©a ti·∫øng Vi·ªát ƒë·ªÉ l√†m options
      if (!item.jp) continue;
      // romaji/hira optional
      pool.push({
        vi: String(item.vi ?? "").trim(),
        jp: String(item.jp ?? "").trim(),
        hira: item.hira ? String(item.hira).trim() : String(item.jp ?? "").trim(),
        romaji: item.romaji ? String(item.romaji).toLowerCase().trim() : "",
        kanji: item.kanji ? String(item.kanji).trim() : undefined,
      });
    }
  }

  if (pool.length === 0) {
    console.warn('[quizHelpers] pool r·ªóng cho JP->VI MCQ');
    return [];
  }

  const shuffled = shuffle(pool);
  const slice = shuffled.slice(0, Math.min(num, shuffled.length));

  // For distractors, use the whole pool's vi values
  const allVi = pool.map(p => p.vi);

  return slice.map((entry) => {
    // pick up to 3 unique distractors that are != entry.vi
    const distractors = shuffle(allVi.filter(v => v !== entry.vi)).slice(0, 3);
    const options = shuffle([entry.vi, ...distractors]);

    return {
      questionText: entry.jp,
      correctAnswers: {
        romaji: entry.romaji,
        hiragana: entry.hira,
        kanji: entry.kanji,
      },
      options,
      type: "MCQ",
    } as Question;
  });
}